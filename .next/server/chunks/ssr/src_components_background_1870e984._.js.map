{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/components/background/abstract-background.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useRef, useMemo } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { Points, PointMaterial } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nfunction ParticleField({ count = 5000, color = '#E8E0D5' }) {\r\n  const points = useRef<THREE.Points>(null);\r\n  \r\n  // Generate random positions for particles\r\n  const particles = useMemo(() => {\r\n    const positions = new Float32Array(count * 3);\r\n    for (let i = 0; i < count; i++) {\r\n      positions[i * 3] = (Math.random() - 0.5) * 10;     // x\r\n      positions[i * 3 + 1] = (Math.random() - 0.5) * 10;  // y\r\n      positions[i * 3 + 2] = (Math.random() - 0.5) * 10;  // z\r\n    }\r\n    return positions;\r\n  }, [count]);\r\n\r\n  // Animate particles\r\n  useFrame((state, delta) => {\r\n    if (points.current) {\r\n      points.current.rotation.x += delta * 0.05;\r\n      points.current.rotation.y += delta * 0.01;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Points ref={points} positions={particles}>\r\n      <PointMaterial\r\n        transparent\r\n        color={color}\r\n        size={0.02}\r\n        sizeAttenuation={true}\r\n        depthWrite={false}\r\n        opacity={0.4}\r\n      />\r\n    </Points>\r\n  );\r\n}\r\n\r\ninterface AbstractBackgroundProps {\r\n  color?: string;\r\n  particleCount?: number;\r\n  className?: string;\r\n}\r\n\r\nexport default function AbstractBackground({\r\n  color = '#E8E0D5',\r\n  particleCount = 5000,\r\n  className = 'w-full h-[40vh]'\r\n}: AbstractBackgroundProps) {\r\n  return (\r\n    <div className={`${className} bg-soft-black`}>\r\n      <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\r\n        <ParticleField count={particleCount} color={color} />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AAAA;AAJA;;;;;AAOA,SAAS,cAAc,EAAE,QAAQ,IAAI,EAAE,QAAQ,SAAS,EAAE;IACxD,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAgB;IAEpC,0CAA0C;IAC1C,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACxB,MAAM,YAAY,IAAI,aAAa,QAAQ;QAC3C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;YAC9B,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,IAAQ,IAAI;YACvD,SAAS,CAAC,IAAI,IAAI,EAAE,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,IAAK,IAAI;YACxD,SAAS,CAAC,IAAI,IAAI,EAAE,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,IAAK,IAAI;QAC1D;QACA,OAAO;IACT,GAAG;QAAC;KAAM;IAEV,oBAAoB;IACpB,CAAA,GAAA,+MAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,OAAO;QACf,IAAI,OAAO,OAAO,EAAE;YAClB,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;YACrC,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;QACvC;IACF;IAEA,qBACE,8OAAC,0JAAA,CAAA,SAAM;QAAC,KAAK;QAAQ,WAAW;kBAC9B,cAAA,8OAAC,iKAAA,CAAA,gBAAa;YACZ,WAAW;YACX,OAAO;YACP,MAAM;YACN,iBAAiB;YACjB,YAAY;YACZ,SAAS;;;;;;;;;;;AAIjB;AAQe,SAAS,mBAAmB,EACzC,QAAQ,SAAS,EACjB,gBAAgB,IAAI,EACpB,YAAY,iBAAiB,EACL;IACxB,qBACE,8OAAC;QAAI,WAAW,GAAG,UAAU,cAAc,CAAC;kBAC1C,cAAA,8OAAC,mMAAA,CAAA,SAAM;YAAC,QAAQ;gBAAE,UAAU;oBAAC;oBAAG;oBAAG;iBAAE;gBAAE,KAAK;YAAG;sBAC7C,cAAA,8OAAC;gBAAc,OAAO;gBAAe,OAAO;;;;;;;;;;;;;;;;AAIpD","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/components/background/geometric-background.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useRef, useMemo, useEffect } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Geometric shape component that creates abstract shapes\r\nfunction GeometricShapes({ color = '#F5A47C' }) {\r\n  const groupRef = useRef<THREE.Group>(null);\r\n  \r\n  // Create multiple geometric objects\r\n  const geometries = useMemo(() => {\r\n    return Array.from({ length: 20 }, (_, i) => ({\r\n      position: [\r\n        (Math.random() - 0.5) * 8,\r\n        (Math.random() - 0.5) * 8,\r\n        (Math.random() - 0.5) * 5\r\n      ],\r\n      rotation: [Math.random() * Math.PI, Math.random() * Math.PI, 0],\r\n      scale: 0.3 + Math.random() * 0.5,\r\n      type: Math.floor(Math.random() * 3), // 0: Icosahedron, 1: Octahedron, 2: Tetrahedron\r\n    }));\r\n  }, []);\r\n  \r\n  // Animation loop\r\n  useFrame((state, delta) => {\r\n    if (groupRef.current) {\r\n      groupRef.current.rotation.y += delta * 0.1;\r\n      groupRef.current.rotation.x += delta * 0.05;\r\n      \r\n      // Animate individual shapes\r\n      groupRef.current.children.forEach((child, i) => {\r\n        child.rotation.x += delta * (0.2 + i * 0.01);\r\n        child.rotation.y += delta * (0.1 + i * 0.01);\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {geometries.map((geo, i) => {\r\n        // Create a different shape based on the type\r\n        let geometry;\r\n        if (geo.type === 0) {\r\n          geometry = <icosahedronGeometry args={[1, 0]} />;\r\n        } else if (geo.type === 1) {\r\n          geometry = <octahedronGeometry args={[1, 0]} />;\r\n        } else {\r\n          geometry = <tetrahedronGeometry args={[1, 0]} />;\r\n        }\r\n        \r\n        return (\r\n          <mesh \r\n            key={i} \r\n            position={new THREE.Vector3(...geo.position as [number, number, number])}\r\n            rotation={new THREE.Euler(...geo.rotation as [number, number, number])}\r\n            scale={geo.scale}\r\n          >\r\n            {geometry}\r\n            <meshStandardMaterial \r\n              color={color} \r\n              wireframe={true}\r\n              transparent\r\n              opacity={0.7}\r\n              emissive={color}\r\n              emissiveIntensity={0.2}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\ninterface GeometricBackgroundProps {\r\n  color?: string;\r\n  className?: string;\r\n}\r\n\r\nexport default function GeometricBackground({\r\n  color = '#F5A47C', // Soft orange by default\r\n  className = 'w-full h-[40vh]'\r\n}: GeometricBackgroundProps) {\r\n  return (\r\n    <div className={`${className} bg-soft-black`}>\r\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 8], fov: 40 }}>\r\n        <ambientLight intensity={0.5} />\r\n        <pointLight position={[10, 10, 10]} intensity={1} />\r\n        <GeometricShapes color={color} />\r\n        <OrbitControls \r\n          enableZoom={false} \r\n          enablePan={false}\r\n          autoRotate\r\n          autoRotateSpeed={0.5}\r\n        />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AACA;AALA;;;;;;AAOA,yDAAyD;AACzD,SAAS,gBAAgB,EAAE,QAAQ,SAAS,EAAE;IAC5C,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAe;IAErC,oCAAoC;IACpC,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACzB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAG,GAAG,CAAC,GAAG,IAAM,CAAC;gBAC3C,UAAU;oBACR,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;oBACxB,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;oBACxB,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;iBACzB;gBACD,UAAU;oBAAC,KAAK,MAAM,KAAK,KAAK,EAAE;oBAAE,KAAK,MAAM,KAAK,KAAK,EAAE;oBAAE;iBAAE;gBAC/D,OAAO,MAAM,KAAK,MAAM,KAAK;gBAC7B,MAAM,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;YACnC,CAAC;IACH,GAAG,EAAE;IAEL,iBAAiB;IACjB,CAAA,GAAA,+MAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,OAAO;QACf,IAAI,SAAS,OAAO,EAAE;YACpB,SAAS,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;YACvC,SAAS,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;YAEvC,4BAA4B;YAC5B,SAAS,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO;gBACxC,MAAM,QAAQ,CAAC,CAAC,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI;gBAC3C,MAAM,QAAQ,CAAC,CAAC,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI;YAC7C;QACF;IACF;IAEA,qBACE,8OAAC;QAAM,KAAK;kBACT,WAAW,GAAG,CAAC,CAAC,KAAK;YACpB,6CAA6C;YAC7C,IAAI;YACJ,IAAI,IAAI,IAAI,KAAK,GAAG;gBAClB,yBAAW,8OAAC;oBAAoB,MAAM;wBAAC;wBAAG;qBAAE;;;;;;YAC9C,OAAO,IAAI,IAAI,IAAI,KAAK,GAAG;gBACzB,yBAAW,8OAAC;oBAAmB,MAAM;wBAAC;wBAAG;qBAAE;;;;;;YAC7C,OAAO;gBACL,yBAAW,8OAAC;oBAAoB,MAAM;wBAAC;wBAAG;qBAAE;;;;;;YAC9C;YAEA,qBACE,8OAAC;gBAEC,UAAU,IAAI,+IAAA,CAAA,UAAa,IAAI,IAAI,QAAQ;gBAC3C,UAAU,IAAI,+IAAA,CAAA,QAAW,IAAI,IAAI,QAAQ;gBACzC,OAAO,IAAI,KAAK;;oBAEf;kCACD,8OAAC;wBACC,OAAO;wBACP,WAAW;wBACX,WAAW;wBACX,SAAS;wBACT,UAAU;wBACV,mBAAmB;;;;;;;eAZhB;;;;;QAgBX;;;;;;AAGN;AAOe,SAAS,oBAAoB,EAC1C,QAAQ,SAAS,EACjB,YAAY,iBAAiB,EACJ;IACzB,qBACE,8OAAC;QAAI,WAAW,GAAG,UAAU,cAAc,CAAC;kBAC1C,cAAA,8OAAC,mMAAA,CAAA,SAAM;YAAC,KAAK;gBAAC;gBAAG;aAAE;YAAE,QAAQ;gBAAE,UAAU;oBAAC;oBAAG;oBAAG;iBAAE;gBAAE,KAAK;YAAG;;8BAC1D,8OAAC;oBAAa,WAAW;;;;;;8BACzB,8OAAC;oBAAW,UAAU;wBAAC;wBAAI;wBAAI;qBAAG;oBAAE,WAAW;;;;;;8BAC/C,8OAAC;oBAAgB,OAAO;;;;;;8BACxB,8OAAC,iKAAA,CAAA,gBAAa;oBACZ,YAAY;oBACZ,WAAW;oBACX,UAAU;oBACV,iBAAiB;;;;;;;;;;;;;;;;;AAK3B","debugId":null}}]
}