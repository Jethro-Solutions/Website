{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function getSystemTheme(): \"dark\" | \"light\" {\n  if (typeof window !== \"undefined\") {\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\"\n  }\n  return \"light\" // Default to light on server\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS;IACd,uCAAmC;;IAEnC;IACA,OAAO,QAAQ,6BAA6B;;AAC9C","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/lib/theme-provider.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\"\r\nimport { getSystemTheme } from \"./utils\"\r\n\r\ntype Theme = \"dark\" | \"light\" | \"system\"\r\n\r\ninterface ThemeProviderProps {\r\n  children: React.ReactNode\r\n  defaultTheme?: Theme\r\n  storageKey?: string\r\n}\r\n\r\ninterface ThemeContextValue {\r\n  theme: Theme\r\n  setTheme: (theme: Theme) => void\r\n  isDarkMode: boolean\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextValue | undefined>(undefined)\r\n\r\nexport function ThemeProvider({\r\n  children,\r\n  defaultTheme = \"system\",\r\n  storageKey = \"jethro-theme\",\r\n  ...props\r\n}: ThemeProviderProps) {\r\n  const [theme, setTheme] = useState<Theme>(defaultTheme)\r\n  const [isDarkMode, setIsDarkMode] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    const storedTheme = localStorage.getItem(storageKey) as Theme | null\r\n    if (storedTheme) {\r\n      setTheme(storedTheme)\r\n    }\r\n  }, [storageKey])\r\n\r\n  useEffect(() => {\r\n    const root = window.document.documentElement\r\n    \r\n    // Remove both classes first\r\n    root.classList.remove(\"light\", \"dark\")\r\n    \r\n    // Apply theme class\r\n    if (theme === \"system\") {\r\n      const systemTheme = getSystemTheme()\r\n      root.classList.add(systemTheme)\r\n      setIsDarkMode(systemTheme === \"dark\")\r\n    } else {\r\n      root.classList.add(theme)\r\n      setIsDarkMode(theme === \"dark\")\r\n    }\r\n    \r\n    // Store the preference\r\n    if (theme !== defaultTheme) {\r\n      localStorage.setItem(storageKey, theme)\r\n    }\r\n  }, [theme, defaultTheme, storageKey])\r\n\r\n  // Listen for system theme changes when using \"system\" mode\r\n  useEffect(() => {\r\n    if (theme !== \"system\") return\r\n    \r\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\")\r\n    const handleChange = () => {\r\n      const root = window.document.documentElement\r\n      const isDark = mediaQuery.matches\r\n      \r\n      root.classList.remove(\"light\", \"dark\")\r\n      root.classList.add(isDark ? \"dark\" : \"light\")\r\n      setIsDarkMode(isDark)\r\n    }\r\n    \r\n    mediaQuery.addEventListener(\"change\", handleChange)\r\n    return () => mediaQuery.removeEventListener(\"change\", handleChange)\r\n  }, [theme])\r\n\r\n  const value = {\r\n    theme,\r\n    setTheme,\r\n    isDarkMode\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value} {...props}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useTheme = (): ThemeContextValue => {\r\n  const context = useContext(ThemeContext)\r\n  \r\n  if (context === undefined) {\r\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\r\n  }\r\n  \r\n  return context\r\n} "],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAmBA,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAiC;AAE3D,SAAS,cAAc,EAC5B,QAAQ,EACR,eAAe,QAAQ,EACvB,aAAa,cAAc,EAC3B,GAAG,OACgB;IACnB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAS;IAC1C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAEtD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,cAAc,aAAa,OAAO,CAAC;QACzC,IAAI,aAAa;YACf,SAAS;QACX;IACF,GAAG;QAAC;KAAW;IAEf,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,OAAO,OAAO,QAAQ,CAAC,eAAe;QAE5C,4BAA4B;QAC5B,KAAK,SAAS,CAAC,MAAM,CAAC,SAAS;QAE/B,oBAAoB;QACpB,IAAI,UAAU,UAAU;YACtB,MAAM,cAAc,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD;YACjC,KAAK,SAAS,CAAC,GAAG,CAAC;YACnB,cAAc,gBAAgB;QAChC,OAAO;YACL,KAAK,SAAS,CAAC,GAAG,CAAC;YACnB,cAAc,UAAU;QAC1B;QAEA,uBAAuB;QACvB,IAAI,UAAU,cAAc;YAC1B,aAAa,OAAO,CAAC,YAAY;QACnC;IACF,GAAG;QAAC;QAAO;QAAc;KAAW;IAEpC,2DAA2D;IAC3D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,UAAU,UAAU;QAExB,MAAM,aAAa,OAAO,UAAU,CAAC;QACrC,MAAM,eAAe;YACnB,MAAM,OAAO,OAAO,QAAQ,CAAC,eAAe;YAC5C,MAAM,SAAS,WAAW,OAAO;YAEjC,KAAK,SAAS,CAAC,MAAM,CAAC,SAAS;YAC/B,KAAK,SAAS,CAAC,GAAG,CAAC,SAAS,SAAS;YACrC,cAAc;QAChB;QAEA,WAAW,gBAAgB,CAAC,UAAU;QACtC,OAAO,IAAM,WAAW,mBAAmB,CAAC,UAAU;IACxD,GAAG;QAAC;KAAM;IAEV,MAAM,QAAQ;QACZ;QACA;QACA;IACF;IAEA,qBACE,8OAAC,aAAa,QAAQ;QAAC,OAAO;QAAQ,GAAG,KAAK;kBAC3C;;;;;;AAGP;AAEO,MAAM,WAAW;IACtB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT","debugId":null}}]
}