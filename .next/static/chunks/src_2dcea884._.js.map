{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/components/background/abstract-background.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useRef, useMemo } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { Points, PointMaterial } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nfunction ParticleField({ count = 5000, color = '#E8E0D5' }) {\r\n  const points = useRef<THREE.Points>(null);\r\n  \r\n  // Generate random positions for particles\r\n  const particles = useMemo(() => {\r\n    const positions = new Float32Array(count * 3);\r\n    for (let i = 0; i < count; i++) {\r\n      positions[i * 3] = (Math.random() - 0.5) * 10;     // x\r\n      positions[i * 3 + 1] = (Math.random() - 0.5) * 10;  // y\r\n      positions[i * 3 + 2] = (Math.random() - 0.5) * 10;  // z\r\n    }\r\n    return positions;\r\n  }, [count]);\r\n\r\n  // Animate particles\r\n  useFrame((state, delta) => {\r\n    if (points.current) {\r\n      points.current.rotation.x += delta * 0.05;\r\n      points.current.rotation.y += delta * 0.01;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Points ref={points} positions={particles}>\r\n      <PointMaterial\r\n        transparent\r\n        color={color}\r\n        size={0.02}\r\n        sizeAttenuation={true}\r\n        depthWrite={false}\r\n        opacity={0.4}\r\n      />\r\n    </Points>\r\n  );\r\n}\r\n\r\ninterface AbstractBackgroundProps {\r\n  color?: string;\r\n  particleCount?: number;\r\n  className?: string;\r\n}\r\n\r\nexport default function AbstractBackground({\r\n  color = '#E8E0D5',\r\n  particleCount = 5000,\r\n  className = 'w-full h-[40vh]'\r\n}: AbstractBackgroundProps) {\r\n  return (\r\n    <div className={`${className} bg-soft-black`}>\r\n      <Canvas camera={{ position: [0, 0, 5], fov: 50 }}>\r\n        <ParticleField count={particleCount} color={color} />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AAAA;;;AAJA;;;;AAOA,SAAS,cAAc,EAAE,QAAQ,IAAI,EAAE,QAAQ,SAAS,EAAE;;IACxD,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAgB;IAEpC,0CAA0C;IAC1C,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;4CAAE;YACxB,MAAM,YAAY,IAAI,aAAa,QAAQ;YAC3C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,IAAK;gBAC9B,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,IAAQ,IAAI;gBACvD,SAAS,CAAC,IAAI,IAAI,EAAE,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,IAAK,IAAI;gBACxD,SAAS,CAAC,IAAI,IAAI,EAAE,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,IAAK,IAAI;YAC1D;YACA,OAAO;QACT;2CAAG;QAAC;KAAM;IAEV,oBAAoB;IACpB,CAAA,GAAA,kNAAA,CAAA,WAAQ,AAAD;kCAAE,CAAC,OAAO;YACf,IAAI,OAAO,OAAO,EAAE;gBAClB,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;gBACrC,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;YACvC;QACF;;IAEA,qBACE,6LAAC,6JAAA,CAAA,SAAM;QAAC,KAAK;QAAQ,WAAW;kBAC9B,cAAA,6LAAC,oKAAA,CAAA,gBAAa;YACZ,WAAW;YACX,OAAO;YACP,MAAM;YACN,iBAAiB;YACjB,YAAY;YACZ,SAAS;;;;;;;;;;;AAIjB;GAlCS;;QAeP,kNAAA,CAAA,WAAQ;;;KAfD;AA0CM,SAAS,mBAAmB,EACzC,QAAQ,SAAS,EACjB,gBAAgB,IAAI,EACpB,YAAY,iBAAiB,EACL;IACxB,qBACE,6LAAC;QAAI,WAAW,GAAG,UAAU,cAAc,CAAC;kBAC1C,cAAA,6LAAC,sMAAA,CAAA,SAAM;YAAC,QAAQ;gBAAE,UAAU;oBAAC;oBAAG;oBAAG;iBAAE;gBAAE,KAAK;YAAG;sBAC7C,cAAA,6LAAC;gBAAc,OAAO;gBAAe,OAAO;;;;;;;;;;;;;;;;AAIpD;MAZwB","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/components/background/geometric-background.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useRef, useMemo, useEffect } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\n// Geometric shape component that creates abstract shapes\r\nfunction GeometricShapes({ color = '#F5A47C' }) {\r\n  const groupRef = useRef<THREE.Group>(null);\r\n  \r\n  // Create multiple geometric objects\r\n  const geometries = useMemo(() => {\r\n    return Array.from({ length: 20 }, (_, i) => ({\r\n      position: [\r\n        (Math.random() - 0.5) * 8,\r\n        (Math.random() - 0.5) * 8,\r\n        (Math.random() - 0.5) * 5\r\n      ],\r\n      rotation: [Math.random() * Math.PI, Math.random() * Math.PI, 0],\r\n      scale: 0.3 + Math.random() * 0.5,\r\n      type: Math.floor(Math.random() * 3), // 0: Icosahedron, 1: Octahedron, 2: Tetrahedron\r\n    }));\r\n  }, []);\r\n  \r\n  // Animation loop\r\n  useFrame((state, delta) => {\r\n    if (groupRef.current) {\r\n      groupRef.current.rotation.y += delta * 0.1;\r\n      groupRef.current.rotation.x += delta * 0.05;\r\n      \r\n      // Animate individual shapes\r\n      groupRef.current.children.forEach((child, i) => {\r\n        child.rotation.x += delta * (0.2 + i * 0.01);\r\n        child.rotation.y += delta * (0.1 + i * 0.01);\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {geometries.map((geo, i) => {\r\n        // Create a different shape based on the type\r\n        let geometry;\r\n        if (geo.type === 0) {\r\n          geometry = <icosahedronGeometry args={[1, 0]} />;\r\n        } else if (geo.type === 1) {\r\n          geometry = <octahedronGeometry args={[1, 0]} />;\r\n        } else {\r\n          geometry = <tetrahedronGeometry args={[1, 0]} />;\r\n        }\r\n        \r\n        return (\r\n          <mesh \r\n            key={i} \r\n            position={new THREE.Vector3(...geo.position as [number, number, number])}\r\n            rotation={new THREE.Euler(...geo.rotation as [number, number, number])}\r\n            scale={geo.scale}\r\n          >\r\n            {geometry}\r\n            <meshStandardMaterial \r\n              color={color} \r\n              wireframe={true}\r\n              transparent\r\n              opacity={0.7}\r\n              emissive={color}\r\n              emissiveIntensity={0.2}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n}\r\n\r\ninterface GeometricBackgroundProps {\r\n  color?: string;\r\n  className?: string;\r\n}\r\n\r\nexport default function GeometricBackground({\r\n  color = '#F5A47C', // Soft orange by default\r\n  className = 'w-full h-[40vh]'\r\n}: GeometricBackgroundProps) {\r\n  return (\r\n    <div className={`${className} bg-soft-black`}>\r\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 8], fov: 40 }}>\r\n        <ambientLight intensity={0.5} />\r\n        <pointLight position={[10, 10, 10]} intensity={1} />\r\n        <GeometricShapes color={color} />\r\n        <OrbitControls \r\n          enableZoom={false} \r\n          enablePan={false}\r\n          autoRotate\r\n          autoRotateSpeed={0.5}\r\n        />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/components/background/floating-cubes.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useRef, useMemo } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nfunction FloatingCubes({ color = '#F5A47C' }) {\r\n  const groupRef = useRef<THREE.Group>(null);\r\n  \r\n  // Create multiple floating cubes\r\n  const cubes = useMemo(() => {\r\n    return Array.from({ length: 30 }, () => ({\r\n      position: [\r\n        (Math.random() - 0.5) * 10,\r\n        (Math.random() - 0.5) * 10,\r\n        (Math.random() - 0.5) * 10\r\n      ],\r\n      rotation: [Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI],\r\n      scale: 0.2 + Math.random() * 0.4,\r\n      speed: 0.2 + Math.random() * 0.5,\r\n      offset: Math.random() * Math.PI * 2,\r\n    }));\r\n  }, []);\r\n  \r\n  // Animation loop\r\n  useFrame((state, delta) => {\r\n    if (groupRef.current) {\r\n      groupRef.current.rotation.y += delta * 0.05;\r\n      \r\n      // Animate individual cubes\r\n      groupRef.current.children.forEach((child, i) => {\r\n        const time = state.clock.elapsedTime;\r\n        const cube = cubes[i];\r\n        // Make cubes float up and down\r\n        child.position.y = cube.position[1] + Math.sin(time * cube.speed + cube.offset) * 0.5;\r\n        // Rotate cubes\r\n        child.rotation.x += delta * cube.speed;\r\n        child.rotation.z += delta * cube.speed * 0.5;\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={groupRef}>\r\n      {cubes.map((cube, i) => (\r\n        <mesh \r\n          key={i} \r\n          position={new THREE.Vector3(...cube.position as [number, number, number])}\r\n          rotation={new THREE.Euler(...cube.rotation as [number, number, number])}\r\n          scale={cube.scale}\r\n        >\r\n          <boxGeometry args={[1, 1, 1]} />\r\n          <meshStandardMaterial \r\n            color={color} \r\n            wireframe={true}\r\n            transparent\r\n            opacity={0.7}\r\n            emissive={color}\r\n            emissiveIntensity={0.3}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\ninterface FloatingCubesBackgroundProps {\r\n  color?: string;\r\n  className?: string;\r\n}\r\n\r\nexport default function FloatingCubesBackground({\r\n  color = '#F5A47C',\r\n  className = 'w-full h-screen'\r\n}: FloatingCubesBackgroundProps) {\r\n  return (\r\n    <div className={`${className} bg-soft-black`}>\r\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 10], fov: 40 }}>\r\n        <ambientLight intensity={0.5} />\r\n        <pointLight position={[10, 10, 10]} intensity={1} />\r\n        <FloatingCubes color={color} />\r\n        <OrbitControls \r\n          enableZoom={false} \r\n          enablePan={false}\r\n          autoRotate\r\n          autoRotateSpeed={0.2}\r\n        />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AACA;;;AALA;;;;;AAOA,SAAS,cAAc,EAAE,QAAQ,SAAS,EAAE;;IAC1C,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAe;IAErC,iCAAiC;IACjC,MAAM,QAAQ,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;wCAAE;YACpB,OAAO,MAAM,IAAI,CAAC;gBAAE,QAAQ;YAAG;gDAAG,IAAM,CAAC;wBACvC,UAAU;4BACR,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;4BACxB,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;4BACxB,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI;yBACzB;wBACD,UAAU;4BAAC,KAAK,MAAM,KAAK,KAAK,EAAE;4BAAE,KAAK,MAAM,KAAK,KAAK,EAAE;4BAAE,KAAK,MAAM,KAAK,KAAK,EAAE;yBAAC;wBACrF,OAAO,MAAM,KAAK,MAAM,KAAK;wBAC7B,OAAO,MAAM,KAAK,MAAM,KAAK;wBAC7B,QAAQ,KAAK,MAAM,KAAK,KAAK,EAAE,GAAG;oBACpC,CAAC;;QACH;uCAAG,EAAE;IAEL,iBAAiB;IACjB,CAAA,GAAA,kNAAA,CAAA,WAAQ,AAAD;kCAAE,CAAC,OAAO;YACf,IAAI,SAAS,OAAO,EAAE;gBACpB,SAAS,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;gBAEvC,2BAA2B;gBAC3B,SAAS,OAAO,CAAC,QAAQ,CAAC,OAAO;8CAAC,CAAC,OAAO;wBACxC,MAAM,OAAO,MAAM,KAAK,CAAC,WAAW;wBACpC,MAAM,OAAO,KAAK,CAAC,EAAE;wBACrB,+BAA+B;wBAC/B,MAAM,QAAQ,CAAC,CAAC,GAAG,KAAK,QAAQ,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,OAAO,KAAK,KAAK,GAAG,KAAK,MAAM,IAAI;wBAClF,eAAe;wBACf,MAAM,QAAQ,CAAC,CAAC,IAAI,QAAQ,KAAK,KAAK;wBACtC,MAAM,QAAQ,CAAC,CAAC,IAAI,QAAQ,KAAK,KAAK,GAAG;oBAC3C;;YACF;QACF;;IAEA,qBACE,6LAAC;QAAM,KAAK;kBACT,MAAM,GAAG,CAAC,CAAC,MAAM,kBAChB,6LAAC;gBAEC,UAAU,IAAI,kJAAA,CAAA,UAAa,IAAI,KAAK,QAAQ;gBAC5C,UAAU,IAAI,kJAAA,CAAA,QAAW,IAAI,KAAK,QAAQ;gBAC1C,OAAO,KAAK,KAAK;;kCAEjB,6LAAC;wBAAY,MAAM;4BAAC;4BAAG;4BAAG;yBAAE;;;;;;kCAC5B,6LAAC;wBACC,OAAO;wBACP,WAAW;wBACX,WAAW;wBACX,SAAS;wBACT,UAAU;wBACV,mBAAmB;;;;;;;eAZhB;;;;;;;;;;AAkBf;GA1DS;;QAmBP,kNAAA,CAAA,WAAQ;;;KAnBD;AAiEM,SAAS,wBAAwB,EAC9C,QAAQ,SAAS,EACjB,YAAY,iBAAiB,EACA;IAC7B,qBACE,6LAAC;QAAI,WAAW,GAAG,UAAU,cAAc,CAAC;kBAC1C,cAAA,6LAAC,sMAAA,CAAA,SAAM;YAAC,KAAK;gBAAC;gBAAG;aAAE;YAAE,QAAQ;gBAAE,UAAU;oBAAC;oBAAG;oBAAG;iBAAG;gBAAE,KAAK;YAAG;;8BAC3D,6LAAC;oBAAa,WAAW;;;;;;8BACzB,6LAAC;oBAAW,UAAU;wBAAC;wBAAI;wBAAI;qBAAG;oBAAE,WAAW;;;;;;8BAC/C,6LAAC;oBAAc,OAAO;;;;;;8BACtB,6LAAC,oKAAA,CAAA,gBAAa;oBACZ,YAAY;oBACZ,WAAW;oBACX,UAAU;oBACV,iBAAiB;;;;;;;;;;;;;;;;;AAK3B;MAnBwB","debugId":null}},
    {"offset": {"line": 521, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/components/background/wave-background.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useRef } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nfunction WaveMesh({ color = '#F5A47C' }) {\r\n  const meshRef = useRef<THREE.Mesh>(null);\r\n  const geometryRef = useRef<THREE.PlaneGeometry>(null);\r\n  \r\n  // Animation loop\r\n  useFrame((state, delta) => {\r\n    if (meshRef.current && geometryRef.current) {\r\n      // Get vertices\r\n      const time = state.clock.elapsedTime;\r\n      const position = geometryRef.current.attributes.position;\r\n      \r\n      // Update each vertex position based on its x,z coordinates\r\n      for (let i = 0; i < position.count; i++) {\r\n        const x = position.getX(i);\r\n        const z = position.getZ(i);\r\n        \r\n        // Create wave pattern\r\n        const amplitude = 0.8;\r\n        const frequency = 0.5;\r\n        const y = amplitude * Math.sin(x * frequency + time) * \r\n                 Math.cos(z * frequency + time * 0.7);\r\n        \r\n        // Update y position\r\n        position.setY(i, y);\r\n      }\r\n      \r\n      position.needsUpdate = true;\r\n      geometryRef.current.computeVertexNormals();\r\n      \r\n      // Slow rotation\r\n      meshRef.current.rotation.y += delta * 0.1;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <mesh ref={meshRef} rotation={[Math.PI / 6, 0, 0]}>\r\n      <planeGeometry ref={geometryRef} args={[10, 10, 50, 50]} />\r\n      <meshStandardMaterial \r\n        color={color}\r\n        wireframe={true}\r\n        side={THREE.DoubleSide}\r\n        transparent\r\n        opacity={0.7}\r\n        emissive={color}\r\n        emissiveIntensity={0.3}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\ninterface WaveBackgroundProps {\r\n  color?: string;\r\n  className?: string;\r\n}\r\n\r\nexport default function WaveBackground({\r\n  color = '#F5A47C',\r\n  className = 'w-full h-screen'\r\n}: WaveBackgroundProps) {\r\n  return (\r\n    <div className={`${className} bg-soft-black`}>\r\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 2, 5], fov: 45 }}>\r\n        <ambientLight intensity={0.5} />\r\n        <pointLight position={[10, 10, 10]} intensity={1} />\r\n        <WaveMesh color={color} />\r\n        <OrbitControls \r\n          enableZoom={false}\r\n          enablePan={false}\r\n          enableRotate={true}\r\n          maxPolarAngle={Math.PI / 2}\r\n          minPolarAngle={Math.PI / 6}\r\n        />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AACA;;;AALA;;;;;AAOA,SAAS,SAAS,EAAE,QAAQ,SAAS,EAAE;;IACrC,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAc;IACnC,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAuB;IAEhD,iBAAiB;IACjB,CAAA,GAAA,kNAAA,CAAA,WAAQ,AAAD;6BAAE,CAAC,OAAO;YACf,IAAI,QAAQ,OAAO,IAAI,YAAY,OAAO,EAAE;gBAC1C,eAAe;gBACf,MAAM,OAAO,MAAM,KAAK,CAAC,WAAW;gBACpC,MAAM,WAAW,YAAY,OAAO,CAAC,UAAU,CAAC,QAAQ;gBAExD,2DAA2D;gBAC3D,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,KAAK,EAAE,IAAK;oBACvC,MAAM,IAAI,SAAS,IAAI,CAAC;oBACxB,MAAM,IAAI,SAAS,IAAI,CAAC;oBAExB,sBAAsB;oBACtB,MAAM,YAAY;oBAClB,MAAM,YAAY;oBAClB,MAAM,IAAI,YAAY,KAAK,GAAG,CAAC,IAAI,YAAY,QACtC,KAAK,GAAG,CAAC,IAAI,YAAY,OAAO;oBAEzC,oBAAoB;oBACpB,SAAS,IAAI,CAAC,GAAG;gBACnB;gBAEA,SAAS,WAAW,GAAG;gBACvB,YAAY,OAAO,CAAC,oBAAoB;gBAExC,gBAAgB;gBAChB,QAAQ,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;YACxC;QACF;;IAEA,qBACE,6LAAC;QAAK,KAAK;QAAS,UAAU;YAAC,KAAK,EAAE,GAAG;YAAG;YAAG;SAAE;;0BAC/C,6LAAC;gBAAc,KAAK;gBAAa,MAAM;oBAAC;oBAAI;oBAAI;oBAAI;iBAAG;;;;;;0BACvD,6LAAC;gBACC,OAAO;gBACP,WAAW;gBACX,MAAM,kJAAA,CAAA,aAAgB;gBACtB,WAAW;gBACX,SAAS;gBACT,UAAU;gBACV,mBAAmB;;;;;;;;;;;;AAI3B;GAhDS;;QAKP,kNAAA,CAAA,WAAQ;;;KALD;AAuDM,SAAS,eAAe,EACrC,QAAQ,SAAS,EACjB,YAAY,iBAAiB,EACT;IACpB,qBACE,6LAAC;QAAI,WAAW,GAAG,UAAU,cAAc,CAAC;kBAC1C,cAAA,6LAAC,sMAAA,CAAA,SAAM;YAAC,KAAK;gBAAC;gBAAG;aAAE;YAAE,QAAQ;gBAAE,UAAU;oBAAC;oBAAG;oBAAG;iBAAE;gBAAE,KAAK;YAAG;;8BAC1D,6LAAC;oBAAa,WAAW;;;;;;8BACzB,6LAAC;oBAAW,UAAU;wBAAC;wBAAI;wBAAI;qBAAG;oBAAE,WAAW;;;;;;8BAC/C,6LAAC;oBAAS,OAAO;;;;;;8BACjB,6LAAC,oKAAA,CAAA,gBAAa;oBACZ,YAAY;oBACZ,WAAW;oBACX,cAAc;oBACd,eAAe,KAAK,EAAE,GAAG;oBACzB,eAAe,KAAK,EAAE,GAAG;;;;;;;;;;;;;;;;;AAKnC;MApBwB","debugId":null}},
    {"offset": {"line": 692, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/components/background/connected-nodes.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useRef, useMemo } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Line } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nfunction NodeNetwork({ color = '#F5A47C', nodeCount = 25, maxConnections = 50 }) {\r\n  const nodesRef = useRef<THREE.Group>(null);\r\n  const connectionsRef = useRef<THREE.Group>(null);\r\n  \r\n  // Create nodes\r\n  const nodes = useMemo(() => {\r\n    return Array.from({ length: nodeCount }, () => ({\r\n      position: [\r\n        (Math.random() - 0.5) * 10,\r\n        (Math.random() - 0.5) * 10,\r\n        (Math.random() - 0.5) * 10\r\n      ],\r\n      velocity: [\r\n        (Math.random() - 0.5) * 0.02,\r\n        (Math.random() - 0.5) * 0.02,\r\n        (Math.random() - 0.5) * 0.02\r\n      ],\r\n      connections: [] as number[],\r\n      size: 0.05 + Math.random() * 0.1\r\n    }));\r\n  }, [nodeCount]);\r\n  \r\n  // Create connections between nodes\r\n  const connections = useMemo(() => {\r\n    const lines: { start: number[]; end: number[] }[] = [];\r\n    \r\n    // Find closest nodes and connect them\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const nodeA = nodes[i];\r\n      const distances: { index: number; distance: number }[] = [];\r\n      \r\n      // Calculate distances to all other nodes\r\n      for (let j = 0; j < nodes.length; j++) {\r\n        if (i !== j) {\r\n          const nodeB = nodes[j];\r\n          const dx = nodeA.position[0] - nodeB.position[0];\r\n          const dy = nodeA.position[1] - nodeB.position[1];\r\n          const dz = nodeA.position[2] - nodeB.position[2];\r\n          const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n          \r\n          distances.push({ index: j, distance });\r\n        }\r\n      }\r\n      \r\n      // Sort by distance and get closest nodes\r\n      distances.sort((a, b) => a.distance - b.distance);\r\n      const connectCount = Math.min(3, distances.length);\r\n      \r\n      // Create connections to closest nodes\r\n      for (let c = 0; c < connectCount; c++) {\r\n        const targetIndex = distances[c].index;\r\n        \r\n        // Check if this connection already exists\r\n        if (!nodeA.connections.includes(targetIndex) && lines.length < maxConnections) {\r\n          lines.push({\r\n            start: [...nodeA.position] as number[],\r\n            end: [...nodes[targetIndex].position] as number[]\r\n          });\r\n          \r\n          nodeA.connections.push(targetIndex);\r\n          nodes[targetIndex].connections.push(i);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return lines;\r\n  }, [nodes, maxConnections]);\r\n  \r\n  // Animation loop\r\n  useFrame((state, delta) => {\r\n    if (nodesRef.current && connectionsRef.current) {\r\n      // Move nodes\r\n      nodesRef.current.children.forEach((node, i) => {\r\n        const nodeData = nodes[i];\r\n        \r\n        // Update position\r\n        for (let axis = 0; axis < 3; axis++) {\r\n          nodeData.position[axis] += nodeData.velocity[axis];\r\n          \r\n          // Bounce off boundaries\r\n          if (Math.abs(nodeData.position[axis]) > 5) {\r\n            nodeData.velocity[axis] *= -1;\r\n          }\r\n        }\r\n        \r\n        // Update mesh position\r\n        node.position.set(\r\n          nodeData.position[0],\r\n          nodeData.position[1],\r\n          nodeData.position[2]\r\n        );\r\n      });\r\n      \r\n      // Update connections\r\n      connectionsRef.current.children.forEach((line, i) => {\r\n        const connection = connections[i];\r\n        const startNode = nodes[nodes.findIndex(n => \r\n          n.position[0] === connection.start[0] && \r\n          n.position[1] === connection.start[1] && \r\n          n.position[2] === connection.start[2]\r\n        )];\r\n        \r\n        const endNode = nodes[nodes.findIndex(n => \r\n          n.position[0] === connection.end[0] && \r\n          n.position[1] === connection.end[1] && \r\n          n.position[2] === connection.end[2]\r\n        )];\r\n        \r\n        if (startNode && endNode) {\r\n          // Update line positions\r\n          const linePoints = [\r\n            new THREE.Vector3(startNode.position[0], startNode.position[1], startNode.position[2]),\r\n            new THREE.Vector3(endNode.position[0], endNode.position[1], endNode.position[2])\r\n          ];\r\n          \r\n          (line as any).geometry.setFromPoints(linePoints);\r\n        }\r\n      });\r\n      \r\n      // Rotate entire network slowly\r\n      nodesRef.current.rotation.y += delta * 0.05;\r\n      connectionsRef.current.rotation.y += delta * 0.05;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* Nodes */}\r\n      <group ref={nodesRef}>\r\n        {nodes.map((node, i) => (\r\n          <mesh \r\n            key={`node-${i}`} \r\n            position={new THREE.Vector3(...node.position as [number, number, number])}\r\n          >\r\n            <sphereGeometry args={[node.size, 8, 8]} />\r\n            <meshStandardMaterial \r\n              color={color}\r\n              emissive={color}\r\n              emissiveIntensity={0.5}\r\n            />\r\n          </mesh>\r\n        ))}\r\n      </group>\r\n      \r\n      {/* Connections */}\r\n      <group ref={connectionsRef}>\r\n        {connections.map((connection, i) => (\r\n          <Line\r\n            key={`connection-${i}`}\r\n            points={[\r\n              new THREE.Vector3(...connection.start as [number, number, number]),\r\n              new THREE.Vector3(...connection.end as [number, number, number])\r\n            ]}\r\n            color={color}\r\n            lineWidth={1}\r\n            transparent\r\n            opacity={0.4}\r\n          />\r\n        ))}\r\n      </group>\r\n    </>\r\n  );\r\n}\r\n\r\ninterface ConnectedNodesProps {\r\n  color?: string;\r\n  className?: string;\r\n}\r\n\r\nexport default function ConnectedNodes({\r\n  color = '#F5A47C',\r\n  className = 'w-full h-screen'\r\n}: ConnectedNodesProps) {\r\n  return (\r\n    <div className={`${className} bg-soft-black`}>\r\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 15], fov: 40 }}>\r\n        <ambientLight intensity={0.5} />\r\n        <pointLight position={[10, 10, 10]} intensity={1} />\r\n        <NodeNetwork color={color} />\r\n        <OrbitControls \r\n          enableZoom={false}\r\n          enablePan={false}\r\n          autoRotate\r\n          autoRotateSpeed={0.3}\r\n        />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 981, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/components/background/spiral-particles.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useRef, useMemo } from 'react';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls, Points, PointMaterial } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nfunction SpiralParticles({ color = '#F5A47C', particleCount = 5000 }) {\r\n  const pointsRef = useRef<THREE.Points>(null);\r\n  \r\n  // Generate particles in a spiral formation\r\n  const particles = useMemo(() => {\r\n    const positions = new Float32Array(particleCount * 3);\r\n    const spiralArms = 3;\r\n    const spiralRadius = 5;\r\n    \r\n    for (let i = 0; i < particleCount; i++) {\r\n      const t = i / particleCount;\r\n      const angle = 2 * Math.PI * spiralArms * t;\r\n      const radius = spiralRadius * t;\r\n      \r\n      // Calculate spiral position\r\n      positions[i * 3] = radius * Math.cos(angle);      // x\r\n      positions[i * 3 + 1] = (Math.random() - 0.5) * 2; // y (slight randomness)\r\n      positions[i * 3 + 2] = radius * Math.sin(angle);  // z\r\n    }\r\n    \r\n    return positions;\r\n  }, [particleCount]);\r\n  \r\n  // Animation loop\r\n  useFrame((state, delta) => {\r\n    if (pointsRef.current) {\r\n      const time = state.clock.getElapsedTime();\r\n      \r\n      // Rotate the spiral\r\n      pointsRef.current.rotation.y += delta * 0.1;\r\n      \r\n      // Create a wave-like motion through the spiral\r\n      const positions = pointsRef.current.geometry.attributes.position.array as Float32Array;\r\n      for (let i = 0; i < particleCount; i++) {\r\n        const i3 = i * 3;\r\n        const x = positions[i3];\r\n        const z = positions[i3 + 2];\r\n        \r\n        // Calculate distance from center\r\n        const distance = Math.sqrt(x * x + z * z);\r\n        \r\n        // Apply wave effect based on distance and time\r\n        positions[i3 + 1] = Math.sin(distance - time) * 0.5;\r\n      }\r\n      \r\n      pointsRef.current.geometry.attributes.position.needsUpdate = true;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Points ref={pointsRef} positions={particles}>\r\n      <PointMaterial\r\n        transparent\r\n        color={color}\r\n        size={0.05}\r\n        sizeAttenuation={true}\r\n        depthWrite={false}\r\n        opacity={0.8}\r\n      />\r\n    </Points>\r\n  );\r\n}\r\n\r\ninterface SpiralParticlesBackgroundProps {\r\n  color?: string;\r\n  className?: string;\r\n}\r\n\r\nexport default function SpiralParticlesBackground({\r\n  color = '#F5A47C',\r\n  className = 'w-full h-screen'\r\n}: SpiralParticlesBackgroundProps) {\r\n  return (\r\n    <div className={`${className} bg-soft-black`}>\r\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 3, 10], fov: 50 }}>\r\n        <ambientLight intensity={0.5} />\r\n        <pointLight position={[10, 10, 10]} intensity={1} />\r\n        <SpiralParticles color={color} />\r\n        <OrbitControls \r\n          enableZoom={false}\r\n          enablePan={false}\r\n          autoRotate\r\n          autoRotateSpeed={0.2}\r\n        />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AAAA;AAAA;;;AAJA;;;;AAOA,SAAS,gBAAgB,EAAE,QAAQ,SAAS,EAAE,gBAAgB,IAAI,EAAE;;IAClE,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAgB;IAEvC,2CAA2C;IAC3C,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;8CAAE;YACxB,MAAM,YAAY,IAAI,aAAa,gBAAgB;YACnD,MAAM,aAAa;YACnB,MAAM,eAAe;YAErB,IAAK,IAAI,IAAI,GAAG,IAAI,eAAe,IAAK;gBACtC,MAAM,IAAI,IAAI;gBACd,MAAM,QAAQ,IAAI,KAAK,EAAE,GAAG,aAAa;gBACzC,MAAM,SAAS,eAAe;gBAE9B,4BAA4B;gBAC5B,SAAS,CAAC,IAAI,EAAE,GAAG,SAAS,KAAK,GAAG,CAAC,QAAa,IAAI;gBACtD,SAAS,CAAC,IAAI,IAAI,EAAE,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,GAAG,wBAAwB;gBAC1E,SAAS,CAAC,IAAI,IAAI,EAAE,GAAG,SAAS,KAAK,GAAG,CAAC,QAAS,IAAI;YACxD;YAEA,OAAO;QACT;6CAAG;QAAC;KAAc;IAElB,iBAAiB;IACjB,CAAA,GAAA,kNAAA,CAAA,WAAQ,AAAD;oCAAE,CAAC,OAAO;YACf,IAAI,UAAU,OAAO,EAAE;gBACrB,MAAM,OAAO,MAAM,KAAK,CAAC,cAAc;gBAEvC,oBAAoB;gBACpB,UAAU,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ;gBAExC,+CAA+C;gBAC/C,MAAM,YAAY,UAAU,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK;gBACtE,IAAK,IAAI,IAAI,GAAG,IAAI,eAAe,IAAK;oBACtC,MAAM,KAAK,IAAI;oBACf,MAAM,IAAI,SAAS,CAAC,GAAG;oBACvB,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE;oBAE3B,iCAAiC;oBACjC,MAAM,WAAW,KAAK,IAAI,CAAC,IAAI,IAAI,IAAI;oBAEvC,+CAA+C;oBAC/C,SAAS,CAAC,KAAK,EAAE,GAAG,KAAK,GAAG,CAAC,WAAW,QAAQ;gBAClD;gBAEA,UAAU,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,GAAG;YAC/D;QACF;;IAEA,qBACE,6LAAC,6JAAA,CAAA,SAAM;QAAC,KAAK;QAAW,WAAW;kBACjC,cAAA,6LAAC,oKAAA,CAAA,gBAAa;YACZ,WAAW;YACX,OAAO;YACP,MAAM;YACN,iBAAiB;YACjB,YAAY;YACZ,SAAS;;;;;;;;;;;AAIjB;GA7DS;;QAwBP,kNAAA,CAAA,WAAQ;;;KAxBD;AAoEM,SAAS,0BAA0B,EAChD,QAAQ,SAAS,EACjB,YAAY,iBAAiB,EACE;IAC/B,qBACE,6LAAC;QAAI,WAAW,GAAG,UAAU,cAAc,CAAC;kBAC1C,cAAA,6LAAC,sMAAA,CAAA,SAAM;YAAC,KAAK;gBAAC;gBAAG;aAAE;YAAE,QAAQ;gBAAE,UAAU;oBAAC;oBAAG;oBAAG;iBAAG;gBAAE,KAAK;YAAG;;8BAC3D,6LAAC;oBAAa,WAAW;;;;;;8BACzB,6LAAC;oBAAW,UAAU;wBAAC;wBAAI;wBAAI;qBAAG;oBAAE,WAAW;;;;;;8BAC/C,6LAAC;oBAAgB,OAAO;;;;;;8BACxB,6LAAC,oKAAA,CAAA,gBAAa;oBACZ,YAAY;oBACZ,WAAW;oBACX,UAAU;oBACV,iBAAiB;;;;;;;;;;;;;;;;;AAK3B;MAnBwB","debugId":null}},
    {"offset": {"line": 1147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1227, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/emmry/Documents/Jethro%20Solutions/jethro-website-1/src/app/background-showcase/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport {\r\n  GeometricBackground,\r\n  FloatingCubesBackground,\r\n  WaveBackground,\r\n  ConnectedNodes,\r\n  SpiralParticlesBackground\r\n} from '@/components/background';\r\n\r\nconst BACKGROUNDS = [\r\n  {\r\n    name: 'Geometric Shapes',\r\n    component: GeometricBackground,\r\n    description: 'Abstract geometric wireframe shapes with soft glow'\r\n  },\r\n  {\r\n    name: 'Floating Cubes',\r\n    component: FloatingCubesBackground,\r\n    description: 'Floating and rotating wireframe cubes'\r\n  },\r\n  {\r\n    name: 'Wave Mesh',\r\n    component: WaveBackground,\r\n    description: 'Animated wave-like surface with wireframe'\r\n  },\r\n  {\r\n    name: 'Connected Nodes',\r\n    component: ConnectedNodes,\r\n    description: 'Network of connected nodes with dynamic movement'\r\n  },\r\n  {\r\n    name: 'Spiral Particles',\r\n    component: SpiralParticlesBackground,\r\n    description: 'Particles arranged in a spiral pattern with wave motion'\r\n  }\r\n];\r\n\r\nexport default function BackgroundShowcase() {\r\n  const [activeBackground, setActiveBackground] = useState(0);\r\n  \r\n  // Get the current component to display\r\n  const CurrentBackground = BACKGROUNDS[activeBackground].component;\r\n\r\n  return (\r\n    <main className=\"min-h-screen bg-soft-black text-soft-white\">\r\n      {/* Background */}\r\n      <div className=\"fixed inset-0 z-0\">\r\n        <CurrentBackground />\r\n      </div>\r\n      \r\n      {/* Content */}\r\n      <div className=\"relative z-10 min-h-screen flex flex-col items-center justify-center\">\r\n        <div className=\"bg-soft-black/70 backdrop-blur-md p-8 rounded-xl max-w-2xl\">\r\n          <h1 className=\"text-4xl font-serif mb-6 text-center\">\r\n            Abstract Backgrounds\r\n          </h1>\r\n          \r\n          <p className=\"text-xl mb-8 text-center font-mono\">\r\n            {BACKGROUNDS[activeBackground].description}\r\n          </p>\r\n          \r\n          <div className=\"flex justify-center gap-4 flex-wrap\">\r\n            {BACKGROUNDS.map((bg, index) => (\r\n              <button\r\n                key={bg.name}\r\n                onClick={() => setActiveBackground(index)}\r\n                className={`px-4 py-2 rounded-md transition-all ${\r\n                  activeBackground === index\r\n                    ? 'bg-soft-orange text-soft-black font-medium'\r\n                    : 'bg-soft-black border border-soft-orange/50 hover:border-soft-orange'\r\n                }`}\r\n              >\r\n                {bg.name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAHA;;;AAWA,MAAM,cAAc;IAClB;QACE,MAAM;QACN,WAAW,gNAAA,CAAA,sBAAmB;QAC9B,aAAa;IACf;IACA;QACE,MAAM;QACN,WAAW,8MAAA,CAAA,0BAAuB;QAClC,aAAa;IACf;IACA;QACE,MAAM;QACN,WAAW,sMAAA,CAAA,iBAAc;QACzB,aAAa;IACf;IACA;QACE,MAAM;QACN,WAAW,sMAAA,CAAA,iBAAc;QACzB,aAAa;IACf;IACA;QACE,MAAM;QACN,WAAW,kNAAA,CAAA,4BAAyB;QACpC,aAAa;IACf;CACD;AAEc,SAAS;;IACtB,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzD,uCAAuC;IACvC,MAAM,oBAAoB,WAAW,CAAC,iBAAiB,CAAC,SAAS;IAEjE,qBACE,6LAAC;QAAK,WAAU;;0BAEd,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;;;;;;;;;;0BAIH,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAuC;;;;;;sCAIrD,6LAAC;4BAAE,WAAU;sCACV,WAAW,CAAC,iBAAiB,CAAC,WAAW;;;;;;sCAG5C,6LAAC;4BAAI,WAAU;sCACZ,YAAY,GAAG,CAAC,CAAC,IAAI,sBACpB,6LAAC;oCAEC,SAAS,IAAM,oBAAoB;oCACnC,WAAW,CAAC,oCAAoC,EAC9C,qBAAqB,QACjB,+CACA,uEACJ;8CAED,GAAG,IAAI;mCARH,GAAG,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgB5B;GA3CwB;KAAA","debugId":null}}]
}